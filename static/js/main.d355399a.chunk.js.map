{"version":3,"sources":["components/Blog.js","components/BlogInput.js","App.js","serviceWorker.js","index.js","reducer/Blog.js"],"names":["Component","require","BlogInputComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","title","content","onSubmit","event","setState","target","value","keyCode","preventDefault","focus","_this2","react_default","a","createElement","className","type","size","Container","Row","Col","id","DropdownButton","Dropdown","Item","href","md","ref","textarea","onKeyDown","onkeydown","onChange","handleContentChange","bind","rows","cols","Button","variant","onClick","handleSubmit","react_markdown_default","source","App","BlogInput_BlogInputComponent","Boolean","window","location","hostname","match","store","createStore","action","blogs","concat","toConsumableArray","blog","slice","blogIndex","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d355399a.chunk.js","sourcesContent":["import React, {\n    Component\n} from 'react'\nimport ReactMarkdown from 'react-markdown'\n\n\nexport default class BlogComponent extends Component {\n    render(){\n        return(\n            <div className =\"blog\">\n                <h1>{this.props.title}</h1> \n                <ReactMarkdown source = {this.props.content}/>\n            </div>          \n        )\n    }\n}","import React, { Component} from 'react'\nimport PropTypes from 'prop-types';\nimport {Button, Container, Col, Row, Dropdown, DropdownButton} from 'react-bootstrap'\nimport ReactMarkdown from 'react-markdown'\nrequire('../css/BlogInput.css');\n\nexport default class BlogInputComponent extends Component {\n    static propTypes = {\n        blogTitle: PropTypes.string,\n        blogContent: PropTypes.string,\n    }\n    \n    constructor(props){\n        super(props)\n        this.state = {\n            title: '',\n            content: ''\n        }\n    }\n\n    handleSubmit() {\n        if (this.props.onSubmit) {\n            this.props.onSubmit({\n                title: this.state.title,\n                content: this.state.content\n            })\n        }\n    }\n\n    handleContentChange (event) {\n        this.setState({\n          content: event.target.value\n       })\n    }\n\n    onkeydown(event){\n        if(event.keyCode === 9){\n            event.preventDefault()\n            event.target.value = event.target.value + \"    \"; // 跳几格由你自已决定\n            event.target.focus()\n        }\n\n    }\n\n    render() {\n        return ( \n        <div className = 'BlogInput' >\n            <div className = 'BlogInput'>\n                <input className = 'BlogInput'type = \"text\" size = \"70\" />\n            </div>\n            <div className = 'BlogInput' >\n            <Container >\n                <Row >\n                <Col></Col>\n                <Col>Author\n                    <input id = \"AuthorInput\" type = \"text\" size = \"20\" /> \n                </Col>\n                <Col > Date \n                    <input id = \"DateInput\" type = \"text\" size = \"20\"/>\n                </Col>\n                <Col> Category\n                    <DropdownButton id = \"dropdown-basic-button\" title = \"Dropdown button\" >\n                        <Dropdown.Item href = \"#/action-1\" > Project</Dropdown.Item>  \n                        <Dropdown.Item href = \"#/action-2\" > Note </Dropdown.Item>  \n                        <Dropdown.Item href = \"#/action-3\" > Add New </Dropdown.Item>  \n                    </DropdownButton>\n                </Col> \n                <Col></Col>\n                </Row>\n                <Row>\n                    <Col md={2}></Col>\n                    <Col md={8}>\n                        <textarea\n                        ref={(textarea) => this.textarea = textarea}\n                        value = {this.state.content} \n\n                        onKeyDown = {this.onkeydown}\n                        onChange={this.handleContentChange.bind(this)} \n                        rows= \"10\" cols= \"50\" \n                        />\n                    </Col>\n                    <Col md={2}></Col>\n                </Row>\n                <Row>\n                    <Col md={3}></Col>\n                    <Col md={3}>\n                        <Button variant = \"primary\" className = \"button\" onClick = {this.handleSubmit.bind(this)}> Save </Button>\n                    </Col>\n                    <Col md={3}>\n                        <Button variant = \"danger\" className = \"button\" > Cancel </Button>\n                    </Col>\n                    <Col md={3}></Col>\n                </Row>\n                <Row>\n                    <Col md={2}></Col>\n                    <Col md={8}>\n                        <ReactMarkdown className = 'result' source = {this.state.content}\n                            \n                        />\n                    </Col>\n                    <Col md={2}></Col>\n                </Row>\n            </Container>\n            </div>\n        </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport './components/Blog'\nimport BlogInput from './components/BlogInput'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        {/* <Blogs /> */}\n        <BlogInput />\n        {/* <BlogInput /> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { createStore} from 'redux'\nimport { Provider } from 'react-redux'\nimport * as serviceWorker from './serviceWorker';\nimport blogReducer from './reducer/Blog';\n\nconst store = createStore(blogReducer)\nReactDOM.render(\n <Provider store = {store} >\n     <App/>\n </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const INIT_BLOG = 'INIT_BLOG'\nconst ADD_BLOG = 'ADD_BLOG'\nconst DELETE_BLOG = 'DELETE_BLOG'\n\n// reducer\nexport default function (state, action) {\n    if (!state) {\n        state = {\n            blogs: []\n        }\n    }\n    switch (action.type) {\n        case INIT_BLOG:\n            // init blog\n            return {\n                blogs: action.blogs\n            }\n        case ADD_BLOG:\n            // add blog\n            return {\n                blogs: [...state.blogs, action.blog]\n            }\n        case DELETE_BLOG:\n            // delete blog\n            return {\n                blogs: [\n                    ...state.blogs.slice(0, action.blogIndex),\n                    ...state.blogs.slice(action.blogIndex + 1)\n                ]\n            }\n        default:\n            return state\n    }\n}\n\n// action creators\nexport const initBlogs = (blogs) => {\n    return {\n        type: INIT_BLOG,\n        blogs\n    }\n}\n\nexport const addBlog = (blog) => {\n    return {\n        type: ADD_BLOG,\n        blog\n    }\n}\n\nexport const deleteBlog = (blogIndex) => {\n    return {\n        type: DELETE_BLOG,\n        blogIndex\n    }\n}"],"sourceRoot":""}