{"version":3,"sources":["reducer/Blog.js","components/Blog.js","components/Controls/Input.js","components/Controls/TextArea.js","components/Controls/DropDown.js","components/BlogInput.js","containers/BlogInput.js","components/BlogList.js","App.js","serviceWorker.js","index.js"],"names":["initBlogs","blogs","type","require","BlogComponent","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","blog","title","content","date","author","localStorage","getItem","JSON","parse","props","length","console","log","_loadBlogs","setState","match","params","blogId","nextProp","react_default","a","createElement","Container","className","react_markdown_default","source","Component","connect","dispatch","Input","event","target","value","onBlur","InputGroup","Prepend","Text","id","FormControl","placeholder","aria-label","aria-describedby","onChange","handleChange","bind","handleBlur","TextArea","keyCode","preventDefault","focus","data-gramm","onKeyDown","handleKeydown","DropDown","options","text","eventKey","onSelect","_this2","DropdownButton","map","option","i","Dropdown","Item","key","href","link","handleSelect","BlogInput","d","Date","toUTCString","onSubmit","contentValue","Row","Col","md","Input_Input","handleTitleBlur","handleAuthorBlur","DropDown_DropDown","handleDropDownSelect","TextArea_TextArea","handleContentChange","Button","variant","onClick","handleSubmit","BlogInputContainer","setItem","stringify","alert","newBlogs","concat","toConsumableArray","_submitToLocal","addBlog","BlogInput_BlogInput","BlogListComponent","redirect","dest","Redirect","to","Table","striped","bordered","hover","handleClick","App","process","Nav","Link","Route","exact","path","render","routerProps","BlogList","components_Blog","containers_BlogInput","Boolean","window","location","hostname","store","createStore","action","slice","blogIndex","ReactDOM","es","BrowserRouter","basename","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3161e223.chunk.js","sourcesContent":["import { bindActionCreators } from \"redux\";\n\nconst INIT_BLOG = 'INIT_BLOG'\nconst ADD_BLOG = 'ADD_BLOG'\nconst DELETE_BLOG = 'DELETE_BLOG'\n\n// reducer\nexport default function (state, action) {\n    if (!state) {\n        state = {\n            blogs: []\n        }\n    }\n    switch (action.type) {\n        case INIT_BLOG:\n            // init blog\n            return {\n                blogs: [...action.blogs]\n            }\n        case ADD_BLOG:\n            // add blog\n            return {\n                blogs: [...state.blogs, action.blog]\n            }\n        case DELETE_BLOG:\n            // delete blog\n            return {\n                blogs: [\n                    ...state.blogs.slice(0, action.blogIndex),\n                    ...state.blogs.slice(action.blogIndex + 1)\n                ]\n            }\n        default:\n            return state\n    }\n}\n\n// action creators\nexport const initBlogs = (blogs) => {\n    return {\n        type: INIT_BLOG,\n        blogs\n    }\n}\n\nexport const addBlog = (blog) => {\n    return {\n        type: ADD_BLOG,\n        blog\n    }\n}\n\nexport const deleteBlog = (blogIndex) => {\n    return {\n        type: DELETE_BLOG,\n        blogIndex\n    }\n}","import React, { Component } from 'react'\nimport ReactMarkdown from 'react-markdown'\nimport {Container} from 'react-bootstrap'\nimport { connect } from 'react-redux';\nimport {initBlogs} from '../reducer/Blog'\nrequire('../css/Blog.css');\n\nclass BlogComponent extends Component {\n\n    _loadBlogs(){\n        let blogs = localStorage.getItem('blogs')\n        blogs = blogs ? JSON.parse(blogs) : []\n        this.props.initBlogs(blogs)\n    }\n\n\n\n    componentWillMount(){\n        const {blogs} = this.props\n        if(blogs.length === 0){\n            console.log(\"is empty\")\n            this._loadBlogs()\n        } else {\n            this.setState({\n                blog: this.props.blogs[this.props.match.params.blogId]\n            })\n        }\n    }\n\n    componentWillReceiveProps(nextProp){\n        this.setState({\n            blog: nextProp.blogs[this.props.match.params.blogId]\n        })\n    }\n    \n\n    constructor(){\n        super()\n        this.state = {\n            blog: {\n                title :'',\n                content :'',\n                date:'',\n                type :'',\n                author:''\n            }\n        }\n    }\n\n    render(){\n        return(\n            <Container className =\"blog\">\n                <h1>{this.state.blog.title}</h1> \n                <ReactMarkdown source = {this.state.blog.content}/>\n            </Container>          \n        )\n    }\n}\n\n\nconst mapStateToProps = (state) => {\n    return {\n      blogs: state.blogs\n    }\n  }\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        initBlogs: (blogs) => {\n        dispatch(initBlogs(blogs))\n        }\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(BlogComponent)\n\n\n","import React, { Component} from 'react'\nimport PropTypes from 'prop-types';\nimport {InputGroup, FormControl} from 'react-bootstrap'\n\nexport default class Input extends Component {\n\n    constructor(props){\n        super(props)\n        this.state = {\n            title: this.props.title,\n            content:''\n        }\n    }\n\n    handleChange(event){\n        this.setState({\n            content:event.target.value\n        })\n    }\n\n    handleBlur(event){\n        if(this.props.onBlur){\n            this.props.onBlur(event.target.value)\n        }\n    }\n    render(){\n        return (\n            <InputGroup className=\"mb-3\">\n                <InputGroup.Prepend>\n                <InputGroup.Text id=\"basic-addon1\">{this.state.title}</InputGroup.Text>\n                </InputGroup.Prepend>\n                <FormControl\n                    value = {this.state.content}\n                    placeholder=\"\"\n                    aria-label=\"\"\n                    aria-describedby=\"basic-addon1\"\n                    onChange = {this.handleChange.bind(this)}\n                    onBlur = {this.handleBlur.bind(this)}\n                />\n            </InputGroup>\n        )\n    }\n\n}","import React, { Component} from 'react'\nimport PropTypes from 'prop-types';\nimport {InputGroup, FormControl} from 'react-bootstrap'\nexport default class TextArea extends Component {\n    \n    constructor(props){\n        super(props)\n        this.state = {\n            content:''\n        }\n    }\n\n    handleChange(event){\n        this.state.content = event.target.value\n        if(this.props.onChange){\n            this.props.onChange(event.target.value)\n        }\n    }\n\n    handleKeydown(event){\n        if(event.keyCode === 9){\n            event.preventDefault()\n            event.target.value = event.target.value + \"    \";\n            event.target.focus()\n        }\n    }\n\n\n    render(){\n        return(\n            <textarea\n                // ref={(textarea) => this.textarea = textarea}\n                value = {this.state.content} \n                data-gramm = 'false'\n                onKeyDown = {this.handleKeydown}\n                onChange={this.handleChange.bind(this)} \n            />\n        )\n    }\n}\n","import React, { Component} from 'react'\nimport PropTypes from 'prop-types';\nimport {Dropdown, DropdownButton} from 'react-bootstrap'\n\nexport default class DropDown extends Component {\n\n    constructor(props){\n        super(props)\n        this.state = {\n            title: '',\n            options: this.props.options\n        }\n    }\n    \n    componentWillMount(){\n        this.state.title = this.props.options[0].text\n    }\n\n    handleSelect(eventKey){\n        if(this.props.onSelect){\n            this.props.onSelect(eventKey)\n        }\n\n        this.setState({title: eventKey})\n    }\n    render(){\n        return (\n            <DropdownButton id = \"dropdown-basic-button\" title = {this.state.title}\n            >\n                {this.state.options.map((option, i) => \n                    <Dropdown.Item key = {i} href = {option.link} \n                                eventKey = {option.text}\n                                onSelect = {this.handleSelect.bind(this)}\n                    >{option.text}</Dropdown.Item> \n                )}  \n            </DropdownButton>\n        )\n    }\n\n}","import React, { Component} from 'react'\nimport PropTypes from 'prop-types';\nimport {Button, Container, Col, Row} from 'react-bootstrap'\nimport Input from './Controls/Input'\nimport TextArea from './Controls/TextArea'\nimport DropDown from './Controls/DropDown'\nimport ReactMarkdown from 'react-markdown'\nrequire('../css/BlogInput.css');\n\nexport default class BlogInput extends Component {\n    static propTypes = {\n        blogTitle: PropTypes.string,\n        blogContent: PropTypes.string,\n    }\n    \n    constructor(props){\n        super(props)\n        this.state = {\n            title: '',\n            author: '',\n            date: '',\n            content: '',\n            type:'',\n            options:[]\n        }\n    }\n\n    componentWillMount () {\n        // set date\n        var d = new Date();\n        this.setState({date : d.toUTCString()})\n        // set dropdown options\n        this.state.options = [{link:'',text :'project'}, \n        {link:'', text:'note'},\n        {link:'', text:'add New...'}]\n    }\n\n    handleSubmit() {\n        if(this.state.type === ''){\n            this.state.type = this.state.options[0].text\n        }\n        if (this.props.onSubmit) {\n            this.props.onSubmit({\n                title: this.state.title,\n                author: this.state.author,\n                type: this.state.type,\n                date: this.state.date,\n                content: this.state.content\n            })\n        }\n    }\n\n    handleDropDownSelect(type){\n        this.setState({\n            // TODO judge whehter have this type or not\n            type: type\n        })\n    }\n\n    handleContentChange (contentValue) {\n        this.setState({\n          content: contentValue\n       })\n    }\n\n    handleTitleBlur(title){\n        this.setState({\n            title: title\n        })\n    }\n    handleAuthorBlur(author){\n        this.setState({\n            author: author\n        })\n    }\n\n    render() {\n        return ( \n        <div className = 'BlogInput' >\n            <div className = 'BlogInput' >\n            <Container >\n                <Row className = \"BlogInput\">\n                    <Col md={8}>\n                        <Input title = 'Title'\n                            onBlur = {this.handleTitleBlur.bind(this)}\n                        />\n                    </Col>\n                </Row>\n                <Row className = 'BlogInput'>\n                    <Col md = {4}>\n                        <Input title = 'Author'\n                            onBlur = {this.handleAuthorBlur.bind(this)}\n                            />\n                    </Col>\n                    <Col md = {4}>   \n                        <DropDown options = {this.state.options}\n                            onSelect ={this.handleDropDownSelect.bind(this)}\n                        />\n                    </Col> \n                </Row>\n                <Row className = 'BlogInput'>\n                    <Col md={8}>\n                        <TextArea onChange = {this.handleContentChange.bind(this)}/>\n                    </Col>\n                </Row>\n                <Row className = \"BlogInput\">\n                    <Col md = {4}></Col>\n                    <Col md = {4}>\n                        <p id = \"DateInput\" type = \"text\">{this.state.date}</p>\n                    </Col>\n                </Row>\n                <Row className = 'BlogInput'>\n                    <Col md={1}></Col>\n                    <Col md={3}>\n                        <Button variant = \"primary\" className = \"button\" onClick = {this.handleSubmit.bind(this)}> Save </Button>\n                    </Col>\n                    <Col md={3}>\n                        <Button variant = \"danger\" className = \"button\" > Cancel </Button>\n                    </Col>\n                </Row>\n                <Row className = 'BlogInput'>\n                    <Col md={2}></Col>\n                    <Col md={8}>\n                        <ReactMarkdown className = 'result' source = {this.state.content}/>\n                    </Col>\n                    <Col md={2}></Col>\n                </Row>\n            </Container>\n            </div>\n        </div>\n        )\n    }\n}","import BlogInput from '../components/BlogInput'\nimport React, {Component} from 'react'\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {initBlogs, addBlog} from '../reducer/Blog'\n\n\nclass BlogInputContainer extends Component {\n    _submitToGithub(blog){\n        //using gh-pages to submit\n    }\n\n    _submitToLocal(blogs){\n        // localStorage.clear()\n        localStorage.setItem('blogs',JSON.stringify(blogs))\n\n    }\n\n    handleSubmit(blog) {\n        if (!blog) return\n        if (!blog.title) return alert('Please Input the title')\n        if (!blog.content) return alert('Please Input the contetn')\n        console.log(blog.title +\" \" + blog.author + \" \"+ blog.content +\" \" +blog.date)\n        const { blogs } = this.props\n        const newBlogs = [...blogs, blog]\n        // this._submitToGithub(blog)\n        console.log(\"new blogs\" + newBlogs)\n        this._submitToLocal(newBlogs)\n        this.props.addBlog(blog)\n\n    }\n\n    render() {\n        return ( \n        <BlogInput onSubmit = {this.handleSubmit.bind(this)}/>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n      blogs: state.blogs\n    }\n  }\n  \n  const mapDispatchToProps = (dispatch) => {\n    return {\n      initBlogs: (blogs) => {\n        dispatch(initBlogs(blogs))\n      },\n      addBlog: (blog) => {\n          console.log(\"blog\"+blog)\n          dispatch(addBlog(blog))\n      }\n    }\n  }\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(BlogInputContainer)","import React, {Component} from 'react'\nimport {Route, Redirect} from 'react-router-dom'\nimport {Table, Container } from 'react-bootstrap'\nimport { connect } from 'react-redux';\nimport Blog from '../components/Blog'\nimport {initBlogs} from '../reducer/Blog'\nimport {withRouter} from 'react-router'\n\nclass BlogListComponent extends Component {\n\n    \n    componentWillMount() {\n        this._loadBlogs()\n    }\n\n    _loadBlogs(){\n        let blogs = localStorage.getItem('blogs')\n        blogs = blogs ? JSON.parse(blogs) : []\n        this.props.initBlogs(blogs)\n    }\n\n    constructor(){\n        super()\n        this.state = {\n            redirect : false,\n            dest : ''\n        }\n    }\n\n    handleClick(i, event){\n\n        console.log(i)\n        this.setState({\n            redirect: true,\n            dest : \"/blogs/\"+i\n        })\n    }\n\n\n    render(){\n        const {blogs} = this.props\n        if(this.state.redirect){\n            return  <Redirect to = {this.state.dest}/>\n        }\n        return(\n            <div>\n                <Table striped bordered hover >\n                    <thead >\n                        <tr >\n                            <th> # </th> \n                            <th> Blog Title </th> \n                            <th> Type</th>\n                            <th> Post date</th>\n                        </tr> \n                    </thead> \n                    <tbody >\n                        {\n                            this.props.blogs.map((blog, i) =>\n                            <tr key = {i}\n                                onClick = {this.handleClick.bind(this, i)}>\n                                <td>{i}</td>\n                                <td>{blog.title}</td>\n                                <td>{blog.type}</td>\n                                <td>{blog.date}</td>\n                            </tr>)\n                        }\n                    </tbody> \n                </Table>\n\n            </div>\n\n        )\n    }\n\n}\nconst mapStateToProps = (state) => {\n    return {\n      blogs: state.blogs\n    }\n  }\n  \nconst mapDispatchToProps = (dispatch) => {\n    return {\n        initBlogs: (blogs) => {\n        dispatch(initBlogs(blogs))\n        }\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(BlogListComponent)","import React, { Component } from 'react';\nimport { Switch } from 'react-router-dom'\nimport {Nav } from 'react-bootstrap'\nimport './App.css';\nimport './components/Blog'\nimport BlogInput from './containers/BlogInput'\nimport BlogList from './components/BlogList'\nimport Blog from './components/Blog'\n\nimport { Route, Redirect } from 'react-router-dom'\n\nclass App extends Component {\n  \n  render() {\n    console.log(this.state);\n    console.log(\"This is the process.env\", process.env.PUBLIC_URL)\n    return (\n      <div className=\"App\">\n        <header className=\"primary-header\">\n          <Nav >\n            <Nav.Item>\n              <Nav.Link href = \"\">Home</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link href = \"blogs2\">Blogs</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link href = \"new\">New Post</Nav.Link>\n            </Nav.Item>\n          </Nav>\n            \n        </header>\n        <Route  exact path = {`/blogs`}  render={ (routerProps) => <BlogList routerProps={routerProps} />}/>\n        <Route path = {`/blogs/:blogId`} render={ (routerProps) => <Blog routerProps={routerProps} />}/>\n\n        <Route path = {`/new`} render={ (routerProps) => <BlogInput routerProps={routerProps} />}/>\n\n      </div>\n    )} \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { createStore} from 'redux'\nimport { Provider } from 'react-redux'\nimport * as serviceWorker from './serviceWorker';\nimport blogReducer from './reducer/Blog';\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom'\nimport Blog from './components/Blog'\nimport BlogInput from './containers/BlogInput'\n\n\nconst store = createStore(blogReducer)\nReactDOM.render(\n <Provider store = {store} >\n     <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <App />\n    </BrowserRouter>\n </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}